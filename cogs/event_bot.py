import datetime
import os
from enum import Enum
import disnake

from disnake.ext import commands, tasks
from disnake import TextInputStyle

import dysium

import sqlite3

class Prize(str, Enum):
    Winner = "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å"
    Player = "–£—á–∞—Å–Ω–∏–∫"

class EventBot(commands.Cog):
    def __init__(self, bot):
        self.bot = bot




    @commands.slash_command(name="event_create", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —ñ–≤–µ–Ω—Ç")
    async def event_create(self, ctx):
        print(f"member:{ctx.author} func: /event_create")
        # Create the view containing our dropdown
        status = "Active"
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        event = curs.execute("SELECT * FROM event WHERE authorid = ? AND status = ?",
                                          (ctx.author.id, status)).fetchone()
        conn.commit()
        conn.close()
        if event == None or event[6] =="Deactive":
            view = EventsPanel(self.bot,ctx.author)
            message = await ctx.send("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —ñ–≤–µ–Ω—Ç:", view=view)
            view.message = message
        elif event[6] == "Active":
            await ctx.send("–ó–∞–≤–µ—Ä—à—ñ—Ç—å —Å—Ç–∞—Ä–∏–π —ñ–≤–µ–Ω—Ç, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π")
        # Sending a message containing our view

    @commands.slash_command(name="all_event_close", description="–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∏–π —ñ–≤–µ–Ω—Ç —É –≤–µ–¥—É—á–æ–≥–æ")
    async def all_event_close(self, ctx, member: disnake.Member):
        print(f"member:{ctx.author} func: /all_event_close")
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        event = curs.execute("SELECT * FROM event WHERE authorid = ? AND status = ?",
                             (member.id, "Active")).fetchone()

        if event == None:
            await ctx.send(f"–ù–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≤–µ–Ω—Ç—ñ–≤ —É –≤–µ–¥—É—â–æ–≥–æ {member}")

        else:
            category = disnake.utils.get(ctx.guild.categories, name=f"{event[2]}  „Éª  {ctx.author.display_name}")
            curs.execute("UPDATE event SET status = ? WHERE authorid = ?", ("Deactive", member.id,))
            await ctx.send(f"–Ü–≤–µ–Ω—Ç {event[2]} –≤–µ–¥—É—â–æ–≥–æ {member.mention} –±—É–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∏–π")

            for channel in category.voice_channels:
                await channel.delete()

            for channel in category.text_channels:
                await channel.delete()

            await category.delete()

        conn.commit()
        conn.close()

    @commands.slash_command(name="prize", description="–í–∏–¥–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —ñ–≤–µ–Ω—Ç")
    async def prize(self, ctx, target: Prize, member: disnake.Member):
        print(f"member:{ctx.author} func: /prize")
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        event = curs.execute("SELECT * FROM event WHERE authorid = ? AND status = ?",
                             (ctx.author.id, "Active")).fetchone()

        if event == None:
            await ctx.send("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∏–π —ñ–≤–µ–Ω—Ç")
            conn.commit()
            conn.close()
        else:
            conn.commit()
            conn.close()
            conn = sqlite3.connect('database/users.db')
            curs = conn.cursor()
            user_data = curs.execute("SELECT * FROM users WHERE userid = ?",
                                     (member.id,)).fetchone()

            if target == "–£—á–∞—Å–Ω–∏–∫":
                prize = 75
                new_balance = user_data[5] + prize

                curs.execute("UPDATE users SET balance = ? WHERE userid = ?", (new_balance, member.id,))

                await ctx.send(f" –í–µ–¥—É—á–∏–π {ctx.author} –Ω–∞–≥–æ—Ä–æ–¥–∏–≤ {member} –∑–∞ —É—á–∞—Å—Ç—å –≤ —ñ–≤–µ–Ω—Ç—ñ {event[2]}")
                conn.commit()
                conn.close()
            elif target == "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å":
                prize = 125
                new_balance = user_data[5] + prize

                curs.execute("UPDATE users SET balance = ? WHERE userid = ?", (new_balance, member.id,))

                await ctx.send(f" –í–µ–¥—É—á–∏–π {ctx.author.display_name} –Ω–∞–≥–æ—Ä–æ–¥–∏–≤ {member.display_name} –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É –≤ —ñ–≤–µ–Ω—Ç—ñ {event[2]}")
                conn.commit()
                conn.close()


class EventsSelect(disnake.ui.Select):
    def __init__(self, bot, author):
        self.bot = bot
        self.author = author

        options = [
            disnake.SelectOption(
                label="–ú–∞—Ñ—ñ—è", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –ú–∞—Ñ—ñ—è",
            ),
            disnake.SelectOption(
                label="–ö—Ä–æ–∫–æ–¥–∏–ª", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –ö—Ä–æ–∫–æ–¥–∏–ª",
            ),
            disnake.SelectOption(
                label="–ë—É–Ω–∫–µ—Ä", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –ë—É–Ω–∫–µ—Ä",
            ),
            disnake.SelectOption(
                label="–ú–æ–Ω–æ–ø–æ–ª—ñ—è", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –ú–æ–Ω–æ–ø–æ–ª—ñ—è",
            ),
            disnake.SelectOption(
                label="–¶–∏—Ç–∞–¥–µ–ª—å", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –¶–∏—Ç–∞–¥–µ–ª—å",
            ),
            disnake.SelectOption(
                label="CodeNames", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: CodeNames",
            ),
            disnake.SelectOption(
                label="–•—Ç–æ —è", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –•—Ç–æ —è",
            ),
            disnake.SelectOption(
                label="–ö–∞–∑–∫–∏ –Ω–∞ –Ω—ñ—á—å", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –ö–∞–∑–∫–∏ –Ω–∞ –Ω—ñ—á—å",
            ),
            disnake.SelectOption(
                label="–õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            ),
            disnake.SelectOption(
                label="–ö–∞—Ä–∞–æ–∫–µ", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–≤–µ–Ω—Ç: –ö–∞—Ä–∞–æ–∫–µ",
            ),
            disnake.SelectOption(
                label="–ù—É–ª—å–æ–≤–∏–π —ñ–≤–µ–Ω—Ç", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω—É–ª—å–æ–≤–∏–π —ñ–≤–µ–Ω—Ç",
            ),
        ]

        super().__init__(
            placeholder="–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —ñ–≤–µ–Ω—Ç",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        await inter.message.delete()
        await inter.guild.create_category(f"{self.values[0]}  „Éª  {inter.author.display_name}", position= 8)

        category = disnake.utils.get(inter.guild.categories, name=f"{self.values[0]}  „Éª  {inter.author.display_name}")
        category_id = category.id
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        curs.execute("INSERT INTO event VALUES(NULL,?,?,?,?,?,?,?)",
                                           (inter.author.id, self.values[0], 8, True, True,"Active", category_id))
        conn.commit()
        conn.close()

        text_channel = await inter.guild.create_text_channel(f"üìå„Éª–ö–µ—Ä—É–≤–∞–Ω–Ω—è", category=category, )
        chat_channel = await inter.guild.create_text_channel(f"üí¨„Éª–ß–∞—Ç", category=category)
        voice_channel = await inter.guild.create_voice_channel(f"üü¢„Éª–Ü–≤–µ–Ω—Ç", category=category)
        await inter.send(
            f" {disnake.utils.get(inter.guild.roles, id=731099776585826355).mention} –ü–æ—á–∞—Ç–æ –Ω–æ–≤–∏–π —ñ–≤–µ–Ω—Ç {self.values[0]}")

        await text_channel.send(f">>> –ö–µ—Ä—ñ–≤–Ω–∏–∫ —ñ–≤–µ–Ω—Ç—É: {inter.author.mention}\n"
                                f" –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–æ–π: "
                                 f"\n üßë‚Äçü§ù‚Äçüßë - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω—Ç—ã "
                                 f"\n üîí - –∑–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö "
                                 f"\n üîì - –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö "
                                 f"\n üîê - –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                                 f"\n üîë - –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
                                 f"\n ‚ö∞Ô∏è - –≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"
                                 f"\n üîà - –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                                 f"\n üîä - –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                                 f"\n üëë - —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–Ω–∞—Ç—ã "
                                 f"\n ‚ùå - –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≤–µ–Ω—Ç",
                                 view = EventManage(self.bot, self.author,text_channel,chat_channel,voice_channel, category))
class EventsPanel(disnake.ui.View):
    message: disnake.Message

    def __init__(self,bot,author):
        super().__init__()

        # Add the dropdown to our view object.
        self.add_item(EventsSelect(bot,author))
        self.bot = bot
        self.author = author

    async def interaction_check(self, interaction: disnake.ApplicationCommandInteraction) -> bool:
        if interaction.author.id != self.author.id:
            return await interaction.response.send_message(
                "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏!", ephemeral=True
            )
        return True
    async def on_timeout(self):
        for button in self.children:
            button.disabled = True
        await self.message.edit(view=self)

class EventManage(disnake.ui.View):
    message: disnake.Message

    def __init__(self, bot, author,text_channel,chat_channel,voice_channel,category):
        super().__init__(timeout=999999)
        self.bot = bot
        self.value = None
        self.author = author
        self.text_channel = text_channel
        self.chat_channel = chat_channel
        self.voice_channel = voice_channel
        self.category = category

    async def on_timeout(self):
        for button in self.children:
            button.disabled = False
        await self.message.edit(view=self)

    async def interaction_check(self, interaction: disnake.ApplicationCommandInteraction) -> bool:
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        event = curs.execute("SELECT * FROM event WHERE event_id = ?",
                            (self.category.id,)).fetchone()
        conn.commit()
        conn.close()
        member = disnake.utils.get(interaction.guild.members, id=event[1])
        if interaction.author.id != member.id:
            return await interaction.response.send_message(
                "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏!", ephemeral=True
            )
        return True


    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="üßë‚Äçü§ù‚Äçüßë")
    async def button_check_count(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.send_message("–ù–∞–ø–∏—à—ñ—Ç—å –±–∞–∂–∞–µ–º—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å")

        msg = await self.bot.wait_for('message', check=lambda message: message.author == interaction.author,
                                      timeout=60.0)
        await self.bot.process_commands(msg)
        msg_content = msg.content
        await self.voice_channel.edit(user_limit=int(msg_content))
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        curs.execute("UPDATE event SET count_people = ? WHERE authorid = ? AND status = ?",
                     (int(msg_content), interaction.author.id, "Active"))

        await interaction.edit_original_message(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É –∫—ñ–º–Ω–∞—Ç—ñ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {int(msg_content)}")
        conn.commit()
        conn.close()

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="üîí")
    async def button_room_close(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        role = disnake.utils.get(interaction.guild.roles, id=731099776585826355)
        await self.voice_channel.set_permissions(role, connect=False)
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        curs.execute("UPDATE event SET lock_room = ? WHERE authorid = ? AND status = ?",
                     (False, interaction.author.id, self.voice_channel.id))
        await interaction.response.send_message("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∫–æ–º–Ω–∞—Ç—É")
        conn.commit()
        conn.close()

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="üîì")
    async def button_room_open(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        role = disnake.utils.get(interaction.guild.roles, id=731099776585826355)
        await self.voice_channel.set_permissions(role, connect=True)
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        curs.execute("UPDATE event SET lock_room = ? WHERE authorid = ? AND status = ?",
                     (True, interaction.author.id,  "Active"))
        await interaction.response.send_message("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ–º–Ω–∞—Ç—É")
        conn.commit()
        conn.close()

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="üîê")
    async def button_ban_member(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.send_message("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø")

        msg = await self.bot.wait_for('message', check=lambda message: message.author == interaction.author,
                                      timeout=60.0)
        await self.bot.process_commands(msg)
        msg_content = msg.content

        member_id = int(msg_content[2:-1])
        room_member = disnake.utils.get(interaction.guild.members, id=member_id)

        overwrite = disnake.PermissionOverwrite()
        overwrite.send_messages = False
        overwrite.view_channel = True
        overwrite.connect = False
        await self.voice_channel.set_permissions(room_member, overwrite=overwrite)

        members = self.voice_channel.members
        for member in members:
            if member.id == room_member.id:
                await room_member.move_to(None)

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="üîë")
    async def button_unban_member(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.send_message("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø")
        msg = await self.bot.wait_for('message', check=lambda message: message.author == interaction.author,
                                      timeout=60.0)
        await self.bot.process_commands(msg)
        msg_content = msg.content

        member_id = int(msg_content[2:-1])
        member = disnake.utils.get(interaction.guild.members, id=member_id)
        overwrite = disnake.PermissionOverwrite()
        overwrite.send_messages = False
        overwrite.view_channel = True
        overwrite.connect = True
        await self.voice_channel.set_permissions(member, overwrite=overwrite)

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="‚ö∞Ô∏è")
    async def button_kick_member(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.send_message("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫–∏–∫–Ω—É—Ç—å")
        msg = await self.bot.wait_for('message', check=lambda message: message.author == interaction.author,
                                      timeout=60.0)
        await self.bot.process_commands(msg)
        msg_content = msg.content

        member_id = int(msg_content[2:-1])
        room_member = disnake.utils.get(interaction.guild.members, id=member_id)
        members = self.voice_channel.members
        for member in members:
            if member.id == room_member.id:
                await room_member.move_to(None)

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="üîà")
    async def button_mute_member(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.send_message("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å")
        msg = await self.bot.wait_for('message', check=lambda message: message.author == interaction.author,
                                      timeout=60.0)
        await self.bot.process_commands(msg)
        msg_content = msg.content

        member_id = int(msg_content[2:-1])
        room_member = disnake.utils.get(interaction.guild.members, id=member_id)
        overwrite = disnake.PermissionOverwrite()
        overwrite.speak = False
        await self.voice_channel.set_permissions(room_member, overwrite=overwrite)
        members = self.voice_channel.members
        for member in members:
            if member.id == room_member.id:
                await member.move_to(self.voice_channel)

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="üîä")
    async def button_unmute_member(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.send_message("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å")
        msg = await self.bot.wait_for('message', check=lambda message: message.author == interaction.author,
                                      timeout=60.0)
        await self.bot.process_commands(msg)
        msg_content = msg.content

        member_id = int(msg_content[2:-1])
        room_member = disnake.utils.get(interaction.guild.members, id=member_id)
        overwrite = disnake.PermissionOverwrite()
        overwrite.speak = True
        await self.voice_channel.set_permissions(room_member, overwrite=overwrite)
        members = self.voice_channel.members
        for member in members:
            if member.id == room_member.id:
                await member.move_to(self.voice_channel)

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="üëë")
    async def button_new_author(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.send_message("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã")
        msg = await self.bot.wait_for('message', check=lambda message: message.author == interaction.author,
                                      timeout=60.0)
        await self.bot.process_commands(msg)
        msg_content = msg.content

        member_id = int(msg_content[2:-1])
        member = disnake.utils.get(interaction.guild.members, id=member_id)

        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        curs.execute("UPDATE event SET authorid = ? WHERE status = ?", (member.id, "Active"))
        await self.text_channel.send(f"–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–Ω–∞—Ç—ã {member.mention}")
        conn.commit()
        conn.close()

    @disnake.ui.button(style=disnake.ButtonStyle.grey, emoji="‚ùå")
    async def button_delete_event(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        conn = sqlite3.connect('database/event.db')
        curs = conn.cursor()
        event = curs.execute("SELECT * FROM event WHERE authorid = ? AND status = ?",
                             (interaction.author.id, "Active")).fetchone()
        curs.execute("UPDATE event SET status = ? WHERE authorid = ?", ("Deactive", interaction.author.id,))
        conn.commit()
        conn.close()
        await interaction.response.send_message(f"–Ü–≤–µ–Ω—Ç {event[2]} –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        for channel in self.category.voice_channels:
            await channel.delete()

        for channel in self.category.text_channels:
            await channel.delete()

        await self.category.delete()

def setup(bot):
    bot.add_cog(EventBot(bot))